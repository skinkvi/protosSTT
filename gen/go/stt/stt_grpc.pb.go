// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.4.0
// - protoc             v5.27.1
// source: stt/stt.proto

package sttv1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.62.0 or later.
const _ = grpc.SupportPackageIsVersion8

const (
	SpeedTypingTest_StartTest_FullMethodName  = "/stt.SpeedTypingTest/StartTest"
	SpeedTypingTest_SubmitTest_FullMethodName = "/stt.SpeedTypingTest/SubmitTest"
	SpeedTypingTest_EndTest_FullMethodName    = "/stt.SpeedTypingTest/EndTest"
)

// SpeedTypingTestClient is the client API for SpeedTypingTest service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SpeedTypingTestClient interface {
	StartTest(ctx context.Context, in *StartTestRequest, opts ...grpc.CallOption) (*StartTestResponse, error)
	SubmitTest(ctx context.Context, in *SubmitTestRequest, opts ...grpc.CallOption) (*SubmitTestResponse, error)
	EndTest(ctx context.Context, in *EndTestRequest, opts ...grpc.CallOption) (*EndTestResponse, error)
}

type speedTypingTestClient struct {
	cc grpc.ClientConnInterface
}

func NewSpeedTypingTestClient(cc grpc.ClientConnInterface) SpeedTypingTestClient {
	return &speedTypingTestClient{cc}
}

func (c *speedTypingTestClient) StartTest(ctx context.Context, in *StartTestRequest, opts ...grpc.CallOption) (*StartTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(StartTestResponse)
	err := c.cc.Invoke(ctx, SpeedTypingTest_StartTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speedTypingTestClient) SubmitTest(ctx context.Context, in *SubmitTestRequest, opts ...grpc.CallOption) (*SubmitTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SubmitTestResponse)
	err := c.cc.Invoke(ctx, SpeedTypingTest_SubmitTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *speedTypingTestClient) EndTest(ctx context.Context, in *EndTestRequest, opts ...grpc.CallOption) (*EndTestResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EndTestResponse)
	err := c.cc.Invoke(ctx, SpeedTypingTest_EndTest_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SpeedTypingTestServer is the server API for SpeedTypingTest service.
// All implementations must embed UnimplementedSpeedTypingTestServer
// for forward compatibility
type SpeedTypingTestServer interface {
	StartTest(context.Context, *StartTestRequest) (*StartTestResponse, error)
	SubmitTest(context.Context, *SubmitTestRequest) (*SubmitTestResponse, error)
	EndTest(context.Context, *EndTestRequest) (*EndTestResponse, error)
	mustEmbedUnimplementedSpeedTypingTestServer()
}

// UnimplementedSpeedTypingTestServer must be embedded to have forward compatible implementations.
type UnimplementedSpeedTypingTestServer struct {
}

func (UnimplementedSpeedTypingTestServer) StartTest(context.Context, *StartTestRequest) (*StartTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartTest not implemented")
}
func (UnimplementedSpeedTypingTestServer) SubmitTest(context.Context, *SubmitTestRequest) (*SubmitTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitTest not implemented")
}
func (UnimplementedSpeedTypingTestServer) EndTest(context.Context, *EndTestRequest) (*EndTestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EndTest not implemented")
}
func (UnimplementedSpeedTypingTestServer) mustEmbedUnimplementedSpeedTypingTestServer() {}

// UnsafeSpeedTypingTestServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SpeedTypingTestServer will
// result in compilation errors.
type UnsafeSpeedTypingTestServer interface {
	mustEmbedUnimplementedSpeedTypingTestServer()
}

func RegisterSpeedTypingTestServer(s grpc.ServiceRegistrar, srv SpeedTypingTestServer) {
	s.RegisterService(&SpeedTypingTest_ServiceDesc, srv)
}

func _SpeedTypingTest_StartTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StartTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeedTypingTestServer).StartTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeedTypingTest_StartTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeedTypingTestServer).StartTest(ctx, req.(*StartTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeedTypingTest_SubmitTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SubmitTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeedTypingTestServer).SubmitTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeedTypingTest_SubmitTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeedTypingTestServer).SubmitTest(ctx, req.(*SubmitTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SpeedTypingTest_EndTest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EndTestRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SpeedTypingTestServer).EndTest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SpeedTypingTest_EndTest_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SpeedTypingTestServer).EndTest(ctx, req.(*EndTestRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SpeedTypingTest_ServiceDesc is the grpc.ServiceDesc for SpeedTypingTest service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SpeedTypingTest_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "stt.SpeedTypingTest",
	HandlerType: (*SpeedTypingTestServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "StartTest",
			Handler:    _SpeedTypingTest_StartTest_Handler,
		},
		{
			MethodName: "SubmitTest",
			Handler:    _SpeedTypingTest_SubmitTest_Handler,
		},
		{
			MethodName: "EndTest",
			Handler:    _SpeedTypingTest_EndTest_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "stt/stt.proto",
}
